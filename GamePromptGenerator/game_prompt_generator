#!/usr/bin/env/python3
import random
import argparse

choice = {
    1: 'Primary',
    2: 'Secondary'
}

parser = argparse.ArgumentParser(description='Generate a game prompt.')
parser.add_argument('-g', '--goals', type=int, choices=choice.keys(), default=1,
                    help='the number of goals to generate')
parser.add_argument('-rs', '--resources', type=int, choices=choice.keys(), default=1,
                    help='the number of resources to generate')
parser.add_argument('-ru', '--rules', type=int, choices=choice.keys(), default=1,
                    help='the number of rules to generate')
parser.add_argument('-th', '--themes', type=int, choices=range(1, 10), default=1,
                    help='the number of themes to generate')

args = parser.parse_args()


def list_from_txt(filename: str) -> list:
    """ Generate list from lines in a text file """
    file = open(filename, 'r')
    result = [line.rstrip() for line in file.readlines()]
    file.close()
    return result


def options_from_list(num: int, lst: list) -> list:
    """ Generate a number of options from a list """
    options = []
    for i in range(num):
        option = random.choice(lst)
        lst.remove(option)
        options.append(option)
    return options


class Color:
    PURPLE = '\033[1;35;48m'
    CYAN = '\033[1;36;48m'
    BOLD = '\033[1;37;48m'
    BLUE = '\033[1;34;48m'
    GREEN = '\033[1;32;48m'
    YELLOW = '\033[1;33;48m'
    RED = '\033[1;31;48m'
    BLACK = '\033[1;30;48m'
    UNDERLINE = '\033[4;37;48m'
    END = '\033[1;37;0m'


def capitalize_words(words: str, delim: str):
    """ Capitalize words separated by spaces and specified delimiters """
    cap = lambda d, w: d.join([s[:1].upper() + s[1:] for s in w.split(d)])

    lst = words.split(" ")
    for dm in delim:
        lst = [cap(dm, w) for w in lst]

    return " ".join(lst)


def generate_choice_options(num: int, name: str, color: Color, filename: str) -> str:
    """ Generate a chosen number of options from a file as text """
    possible_options = list_from_txt(filename)
    op = options_from_list(num, possible_options)

    text = ''
    for i in range(num):
        option = capitalize_words(str(op[i]), "-/")
        p = '{p} '.format(p=choice[i + 1]) if num > 1 else ''
        text += '{p}{n} is {c}{o}'.format(p=p, n=name, c=color, o=option)
        text += Color.END + '\n'

    return text


def generate_options(num: int, name: str, color: Color, filename: str):
    """ Generate a number of options from a file as text """
    possible_options = list_from_txt(filename)
    op = options_from_list(num, possible_options)

    option = capitalize_words(str(op[0]), "-/")
    plural = ('s', 'are') if num > 1 else ('', 'is')
    text = '{n}{s} {v} {c}{o}'.format(n=name, s=plural[0], v=plural[1], c=color, o=option)
    for i in range(1, num):
        option = capitalize_words(str(op[i]), "-/")
        text += ', {o}'.format(o=option)
    text += Color.END + '\n'

    return text


prompt = ''
prompt += generate_choice_options(args.goals, 'Goal', Color.PURPLE, 'source/goals.txt')
prompt += generate_choice_options(args.resources, 'Resource', Color.CYAN, 'source/resources.txt')
prompt += generate_choice_options(args.rules, 'Rule', Color.RED, 'source/rules.txt')
prompt += generate_options(args.themes, 'Theme', Color.YELLOW, 'source/themes.txt')

print(prompt)
